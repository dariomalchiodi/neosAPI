(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     66878,       1713]
NotebookOptionsPosition[     62530,       1577]
NotebookOutlinePosition[     63119,       1598]
CellTagsIndexPosition[     63076,       1595]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Solving complex optimization problems through remote access to the NEOS server\
\>", "Title"],

Cell["\<\
Dario Malchiodi
Universit\[AGrave] degli Studi di Milano
Dipartimento di Informatica
Via Comelico 39/41 2135 Milano ITALY
malchiodi@di.unimi.it\
\>", "Author",
 CellChangeTimes->{{3.5588070250565042`*^9, 3.5588070357628717`*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
      "**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**", 
       "**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**",
        "**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**", "**",
        "**", "**"}], "*", "\n", "       ", "Copyright", " ", 
      RowBox[{"(", "C", ")"}], " ", "2010", " ", "Dario", " ", "Malchiodi"}], 
     " ", "<", 
     RowBox[{
      RowBox[{"malchiodi", "@", "di"}], ".", "unimi", ".", "it"}], ">", "\n", 
     "\n", 
     RowBox[{"This", " ", "file", " ", "is", " ", "part", " ", "of", " ", 
      RowBox[{"neosAPI", ".", "\n", "neosAPI"}], " ", "is", " ", "free", " ", 
      "software"}]}], ";", " ", 
    RowBox[{"you", " ", "can", " ", "redistribute", " ", "it", " ", 
     RowBox[{"and", "/", "or"}], " ", "modify", " ", "it", " ", "under", " ", 
     "the", "\n", "terms", " ", "of", " ", "the", " ", "GNU", " ", "Lesser", 
     " ", "General", " ", "Public", " ", "License", " ", "as", " ", 
     "published", " ", "by", " ", "the", " ", "Free", "\n", "Software", " ", 
     "Foundation"}], ";", " ", 
    RowBox[{
    "either", " ", "version", " ", "2.1", " ", "of", " ", "the", " ", 
     "License"}]}], ",", " ", 
   RowBox[{"or", " ", 
    RowBox[{"(", 
     RowBox[{"at", " ", "your", " ", "option"}], ")"}], "\n", "any", " ", 
    "later", " ", 
    RowBox[{"version", ".", "\n", "neosAPI"}], " ", "is", " ", "distributed", 
    " ", "in", " ", "the", " ", "hope", " ", "that", " ", "it", " ", "will", 
    " ", "be", " ", "useful"}], ",", " ", 
   RowBox[{
    RowBox[{"but", " ", "without", " ", "any", "\n", "warranty"}], ";", " ", 
    RowBox[{
    "without", " ", "even", " ", "the", " ", "implied", " ", "warranty", " ", 
     "of", " ", "merchantability", " ", "or", " ", "fitness", "\n", "for", 
     " ", "a", " ", "particular", " ", 
     RowBox[{"purpose", ".", " ", "See"}], " ", "the", " ", "GNU", " ", 
     "Lesser", " ", "General", " ", "Public", " ", "License", " ", "for", 
     "\n", "more", " ", 
     RowBox[{"details", ".", "\n", "You"}], " ", "should", " ", "have", " ", 
     "received", " ", "a", " ", "copy", " ", "of", " ", "the", " ", "GNU", 
     " ", "Lesser", " ", "General", " ", "Public", " ", "License", "\n", 
     "along", " ", "with", " ", "neosAPI"}], ";", " ", 
    RowBox[{"if", " ", "not"}]}], ",", " ", 
   RowBox[{
    RowBox[{"see", " ", "<", 
     RowBox[{"http", ":"}]}], "//", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"www", ".", "gnu", ".", "org"}], "/", "licenses"}], "/"}], ">",
      "."}]}]}], "\n", "\n", 
  "******************************************************************************)"}\
]], "Code"],

Cell[CellGroupData[{

Cell["The NEOS server", "Section"],

Cell[TextData[{
 "The neosAPI package allows the access to the NEOS server for remote \
optimization directly within ",
 StyleBox["Wolfram Mathematica",
  FontSlant->"Italic"],
 ". The software web page is available at the address ",
 StyleBox["http://malchiodi.di.unimi.it/software/neosAPI",
  FontFamily->"Courier",
  FontSize->11],
 "."
}], "Text",
 CellChangeTimes->{
  3.5588528190663958`*^9, 3.558853038232684*^9, {3.558853102200569*^9, 
   3.5588531213046703`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Obtaining and installing the package", "Section"],

Cell[TextData[{
 "The software is available on github at the address ",
 StyleBox["http://github.com/dariomalchiodi/neosAPI",
  FontFamily->"Courier",
  FontSize->11],
 ", in a repository containing this documentation notebook and the  package \
file ",
 StyleBox["neosAPI.m",
  FontFamily->"Courier",
  FontSize->11],
 ". The latter should be saved in a directory listed in the ",
 StyleBox["$Path",
  FontFamily->"Courier",
  FontSize->11],
 " variable (a suggested choice is the ",
 StyleBox["Applications",
  FontSlant->"Italic"],
 " directory in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " system- or user-based root directory). The xmlRPC package, described at \
the address ",
 StyleBox["http://malchiodi.di.unimi.it/software//neosAPI",
  FontFamily->"Courier",
  FontSize->11],
 ", needs to be previously installed."
}], "Text",
 CellChangeTimes->{{3.558810394084673*^9, 3.5588104211320972`*^9}, {
  3.5588526843908453`*^9, 3.5588527115540247`*^9}, {3.558852781289112*^9, 
  3.5588530244975157`*^9}, {3.558877805174643*^9, 3.558877806393344*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using the package", "Section",
 CellChangeTimes->{{3.5588537665081387`*^9, 3.558853768241852*^9}}],

Cell["\<\
The neosAPI package provides the following functions.\
\>", "Text",
 CellChangeTimes->{{3.558853792943749*^9, 3.558853803855032*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosHelp", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell["\<\
Returns a string containing a generic help message.\
\>", "Text",
 CellChangeTimes->{{3.558809393304268*^9, 3.5588093988316517`*^9}, {
  3.558853816615035*^9, 3.558853825622682*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosEmailHelp", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell["\<\
Returns a string containing a generic help message for email users.\
\>", "Text",
 CellChangeTimes->{{3.5588093118052*^9, 3.558809312538237*^9}, {
  3.5588094083682137`*^9, 3.558809410320282*^9}, {3.5588104502061577`*^9, 
  3.558810450614201*^9}, {3.5588538679734*^9, 3.558853871573265*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosWelcome", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell["\<\
Returns a string containing a welcome message.\
\>", "Text",
 CellChangeTimes->{
  3.558809445573751*^9, {3.558810453909749*^9, 3.5588104558376017`*^9}, {
   3.558853875693183*^9, 3.558853878236957*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosVersion", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell["\<\
Returns a string containing the  version number of the NEOS server.\
\>", "Text",
 CellChangeTimes->{3.55880965937633*^9, 3.558853813671603*^9, 
  3.558853886351262*^9}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosPing", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Returns the string ",
 StyleBox["\"NeosServer is alive\"",
  FontFamily->"Courier",
  FontSize->11],
 " when the NEOS server is running."
}], "Text",
 CellChangeTimes->{
  3.5588096654650097`*^9, {3.558853888047365*^9, 3.55885389265578*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosPrintQueue", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell["\<\
Returns a string containing a description of the current NEOS jobs.\
\>", "Text",
 CellChangeTimes->{
  3.5588096717937527`*^9, {3.558853910918621*^9, 3.558853917863204*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosSubmitJob", "[", 
   StyleBox["request",
    FontFamily->"Times",
    FontSlant->"Italic",
    FontColor->RGBColor[0, 0, 1]], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Submits a job tho the NEOS server, encoded in ",
 StyleBox["request",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " using the standard XML-RPC format for a given catetory, returning a list \
",
 StyleBox["{jobNumber, password}",
  FontFamily->"Courier",
  FontSize->11],
 " or a string containing the description of an occurred error."
}], "Text",
 CellChangeTimes->{{3.558809639478527*^9, 3.558809641618787*^9}, 
   3.558809678535041*^9, {3.55885392605445*^9, 3.558853938270753*^9}, {
   3.558859285735567*^9, 3.558859315185913*^9}}],

Cell[BoxData[
 StyleBox[GridBox[{
    {
     StyleBox[
      RowBox[{"neosGetJobStatus", "[", 
       RowBox[{
        StyleBox[
         StyleBox["jobNumber", "MR",
          FontFamily->"Times",
          FontSlant->"Italic",
          FontColor->RGBColor[0, 0, 1]], "MR",
         GridBoxOptions->{
         GridBoxDividers->{
          "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}},
            "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.16]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
        StyleBox[
         StyleBox["password", "MR",
          FontFamily->"Times",
          FontSlant->"Italic",
          FontColor->RGBColor[0, 0, 1]], "MR",
         GridBoxOptions->{
         GridBoxDividers->{
          "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}},
            "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.16]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}}]}], "]"}], "MR",
      GridBoxOptions->{
      GridBoxDividers->{
       "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.16]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}}]}
   }], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Returns either ",
 StyleBox["\"Done\"",
  FontFamily->"Courier",
  FontSize->11],
 ", ",
 StyleBox["\"Running\"",
  FontFamily->"Courier",
  FontSize->11],
 ", ",
 StyleBox["\"Waiting\"",
  FontFamily->"Courier",
  FontSize->11],
 ", ",
 StyleBox["\"Unknown Job\"",
  FontFamily->"Courier",
  FontSize->11],
 ", or ",
 StyleBox["\"Bad Password\"",
  FontFamily->"Courier",
  FontSize->11],
 " according to the status of the job identified by ",
 StyleBox["jobNumber",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["password",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 "."
}], "Text",
 CellChangeTimes->{
  3.558810156559369*^9, {3.558854130530672*^9, 3.558854166000452*^9}, {
   3.55885939796495*^9, 3.5588594138703537`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosGetFinalResults", "[", 
   RowBox[{
    StyleBox[
     StyleBox["jobNumber", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox["password", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}]}], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Returns a string containing the output of the job specified by ",
 StyleBox["jobNumber",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["password",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 ". If the job is still running, the function will hang until the former \
completes."
}], "Text",
 CellChangeTimes->{
  3.558810222579232*^9, {3.558854216687117*^9, 3.558854242031105*^9}, {
   3.5588594921441097`*^9, 3.5588595028131943`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosSolveJob", "[", 
   StyleBox["request",
    FontFamily->"Times",
    FontSlant->"Italic",
    FontColor->RGBColor[0, 0, 1]], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Submits a job tho the NEOS server, encoded in ",
 StyleBox["request",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " using the standard XML-RPC format a given category, returning the \
corresponding output. The function will hang until the job completes."
}], "Text",
 CellChangeTimes->{
  3.558810235119223*^9, {3.558859250088056*^9, 3.5588592527878103`*^9}, {
   3.5588597298157988`*^9, 3.558859779184161*^9}, {3.5588601476344423`*^9, 
   3.558860148811326*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosGetJobInfo", "[", 
   RowBox[{
    StyleBox[
     StyleBox["jobNumber", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox["password", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}]}], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Returns a string describing a 4-ple ",
 StyleBox["(category, solverName, input, status)",
  FontSlant->"Italic"],
 " describing the  status of the job identified by ",
 StyleBox["jobNumber",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["password",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 "."
}], "Text",
 CellChangeTimes->{
  3.558810246637936*^9, {3.5588598343449297`*^9, 3.5588598721568193`*^9}, {
   3.5588599409822693`*^9, 3.5588599417486763`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosKillJob", "[", 
   RowBox[{
    StyleBox[
     StyleBox["jobNumber", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox["password", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}]}], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Kills the job identified by ",
 StyleBox["jobNumber",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["password",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 "."
}], "Text",
 CellChangeTimes->{
  3.558810262086842*^9, {3.558859962771646*^9, 3.5588599740781384`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosGetIntermediateResults", "[", 
   RowBox[{
    StyleBox[
     StyleBox["jobNumber", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox[
      StyleBox["password", "MR",
       FontFamily->"Times",
       FontSlant->"Italic"], "MR",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox["offset", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}]}], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Retrieves intermediate results of the job identified by ",
 StyleBox["jobNumber",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["password",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 ", starting at character ",
 StyleBox["offset",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " up to the last received data. The function hangs until another packet of \
output is sent or the job is finished."
}], "Text",
 CellChangeTimes->{{3.558809865788492*^9, 3.558809866946391*^9}, 
   3.558810273307393*^9, {3.558860039968122*^9, 3.5588600652452908`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosListCategories", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell["\<\
Returns a dictionary containing all categories available on NEOS.\
\>", "Text",
 CellChangeTimes->{
  3.558810290295042*^9, {3.558860105183249*^9, 3.558860107611821*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosListAllSolvers", "[", "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Returns a string listing all solvers available on NEOS, each shown in the \
format ",
 StyleBox["category:solver:inputMethod",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{
  3.558810301938854*^9, {3.55886011279663*^9, 3.5588601233715763`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{
   StyleBox["neosListSolversInCategory", "MR"], 
   StyleBox["[", "MR"], 
   StyleBox["category", "TI",
    FontColor->RGBColor[0, 0, 1]], 
   StyleBox["]", "MR"]}],
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Returns a string listing all solvers for category ",
 StyleBox["category",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 ", each shown in the format ",
 StyleBox["solver:inputMethod",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{
  3.558810313499695*^9, {3.558860197138298*^9, 3.558860222625216*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{
   StyleBox["neosGetSolverTemplate", "MR"], 
   StyleBox["[", "MR"], 
   RowBox[{
    StyleBox["category", "TI",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[",", "MR"], 
    StyleBox["solverName", "TI",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[",", "MR"], 
    StyleBox["inputMethod", "TI",
     FontColor->RGBColor[0, 0, 1]]}], 
   StyleBox["]", "MR"]}],
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Returns a template for the solver identified by ",
 StyleBox["category",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 ", ",
 StyleBox["solverName",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["inputMethod",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 "."
}], "Text",
 CellChangeTimes->{
  3.558810324799753*^9, {3.558860321734748*^9, 3.5588603379078703`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosGetIntermediateResultsNonBlocking", "[", 
   RowBox[{
    StyleBox[
     StyleBox["jobNumber", "MR",
      FontFamily->"Times",
      FontSlant->"Italic"], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox["password", "MR",
      FontFamily->"Times",
      FontSlant->"Italic"], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox["offset", "MR",
      FontFamily->"Times",
      FontSlant->"Italic"], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}]}], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Retrieves intermediate results of the job identified by ",
 StyleBox["jobNumber",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["password",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 ", starting at character ",
 StyleBox["offset",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " up to the last received data. The function returns an empty string if the \
job is still running."
}], "Text",
 CellChangeTimes->{
  3.558810338541411*^9, {3.5588604372698727`*^9, 3.5588604826890078`*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"neosGetFinalResultsNonBlocking", "[", 
   RowBox[{
    StyleBox[
     StyleBox["jobNumber", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}], ",", " ", 
    StyleBox[
     StyleBox["password", "MR",
      FontFamily->"Times",
      FontSlant->"Italic",
      FontColor->RGBColor[0, 0, 1]], "MR",
     GridBoxOptions->{
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.16]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}}]}], "]"}], "MR",
  GridBoxOptions->{
  GridBoxDividers->{
   "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
    "RowsIndexed" -> {}},
  GridBoxSpacings->{"Columns" -> {
      Offset[0.27999999999999997`], {
       Offset[0.5599999999999999]}, 
      Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
      Offset[0.2], {
       Offset[0.16]}, 
      Offset[0.2]}, "RowsIndexed" -> {}}}]], "Code"],

Cell[TextData[{
 "Retrieves the results of the job identified by ",
 StyleBox["jobNumber",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 " and ",
 StyleBox["password",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 ", returning an empty string if the latter is still running. In this way the \
function always returns without hanging."
}], "Text",
 CellChangeTimes->{
  3.5588103531433983`*^9, {3.5588606367889013`*^9, 3.558860671128922*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using the package", "Section",
 CellChangeTimes->{3.55880920114394*^9}],

Cell[TextData[{
 "The package loads as usual in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ":"
}], "Text"],

Cell[BoxData[
 RowBox[{"<<", "neosAPI`"}]], "Input"],

Cell[TextData[{
 "The functions ",
 StyleBox["neosHelp", "Input"],
 ", ",
 StyleBox["neosEmailHelp", "Input"],
 " and ",
 StyleBox["neosWelcome", "Input"],
 " return generic help messages:"
}], "Text",
 CellChangeTimes->{{3.558860991438191*^9, 3.558861045002541*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosHelp", "[", "]"}]], "Input"],

Cell[BoxData["\<\"class NeosServer\\n |  Methods defined here:\\n |  \\n |  \
__init__(self)\\n |  \\n |  disableSolver(self, category, solvername, input, \
password)\\n |      Temporarily disable your solver.\\n |      \\n |      If \
you wish to temporarily remove your solver from NEOS, then you\\n |      can \
use this method.  Your solver will be removed from the NEOS solvers\\n |      \
index, and any users who attempt to use your solver while\\n |      disabled \
will receive a message that it has been disabled.\\n |      Use \
'enableSolver' to reenable.\\n |  \\n |  emailHelp(self)\\n |      Returns \
general help message for email users\\n |  \\n |  enableSolver(self, \
category, solvername, input, password)\\n |      Reenables a solver that has \
been disabled.\\n |      \\n |      To provide a new solver, use \
registerSolver.\\n |  \\n |  getFinalResults(self, jobNumber, password)\\n |  \
    Gets results of job from NEOS.\\n |      \\n |      Retrieve results from \
NEOS.  If the job is still running, then\\n |      this function will hang \
until the job is finished.\\n |      \\n |      This function will return a \
base-64 encoded object.\\n |      Please read your XML-RPC client \
documentation for decoding.  \\n |      \\n |      (For Python's xmlrpclib \
library, you can use the object's 'data'\\n |      data member).\\n |  \\n |  \
getFinalResultsNonBlocking(self, jobNumber, password)\\n |      Gets results \
of job from NEOS (non-blocking).\\n |      \\n |      Retrieve results from \
NEOS.  If the job is still running, then\\n |      this function will return \
an empty string (base-64 encoded).\\n |      \\n |      This function will \
return a base-64 encoded object.\\n |      Please read your XML-RPC client \
documentation for decoding.  \\n |      \\n |      (For Python's xmlrpclib \
library, you can use the object's 'data'\\n |      data member).\\n |  \\n |  \
getIntermediateResults(self, jobNumber, password, offset)\\n |      Gets \
intermediate results of job from NEOS.\\n |      \\n |      Retrieve \
intermediate results from NEOS, starting at the character\\n |      offset up \
to the last received data.  Intermediate results are usually\\n |      the \
standard output of the solver daemon.\\n |      \\n |      If the job is \
still running, then this function will hang until\\n |      another packet of \
output is sent to NEOS or the job is finished.\\n |      The offset \\n |     \
 \\n |      This function will return a tuple of thebase-64 encoded object \
and\\n |      the new offset (object, newoffset).  The offset refers to \
uncoded\\n |      characters.  Please read your XML-RPC client documentation \
for decoding.  \\n |      \\n |      (For Python's xmlrpclib library, you can \
use the object's 'data'\\n |      data member).\\n |  \\n |  \
getIntermediateResultsNonBlocking(self, jobNumber, password, off)\\n |      \
Gets intermediate results of job from NEOS.\\n |      \\n |      Retrieve \
intermediate results from NEOS.  Intermediate results are\\n |      usually \
the standard output of the solver daemon.\\n |      \\n |      This function \
will return a tuple of thebase-64 encoded object and\\n |      the new \
offset.  The offset refers to uncoded characters.\\n |      Please read your \
XML-RPC client documentation for decoding.  \\n |      \\n |      (For \
Python's xmlrpclib library, you can use the object's 'data'\\n |      data \
member).\\n |  \\n |  getJobInfo(self, jobNumber, password)\\n |      Gets \
information on the job.\\n |      returns a four-tuple (category, \
solver_name, input, status).\\n |  \\n |  getJobStatus(self, jobNumber, \
password)\\n |      Get the current status of your job.\\n |      \\n |      \
Returns \\\"Done\\\", \\\"Running\\\", \\\"Waiting\\\", \\\"Unknown Job\\\", \
or \\\"Bad Password\\\".\\n |  \\n |  getSolverInfo(self, category, \
solverName, inputMethod)\\n |      Get information about a solver\\n |      \
\\n |      The method returns a string giving information about\\n |      the \
chosen solver and the input it needs\\n |  \\n |  getSolverTemplate(self, \
category, solvername, inputMethod)\\n |      Returns a template for a given \
solver.\\n |      \\n |      If the solver category:solvername:inputMethod \
exists on NEOS, then\\n |      an XML template is returned for using this \
solver via the XML-RPC\\n |      or email interfaces.\\n |  \\n |  \
getXML(self, category, name, input)\\n |      Returns the XML description of \
the given solver.\\n |      \\n |      This will be deprecated.  Use \
getSolverTemplate.\\n |  \\n |  help(self)\\n |  \\n |  killJob(self, \
jobNumber, password, killmsg='')\\n |      Cancel a NEOS submission.\\n |     \
 \\n |      If you want to cancel a job submission running on NEOS (or\\n |   \
   waiting to run on NEOS), then use this method.  We require\\n |      the \
job password to prevent abuse of this function.\\n |  \\n |  \
listAllSolvers(self)\\n |      Lists all solvers available on NEOS.\\n |      \
\\n |      Returns a list of category:solver:inputMethod\\n |  \\n |  \
listCategories(self)\\n |      Lists all categories available on NEOS\\n |    \
  \\n |      Returns a dictionary with entries {'abbreviated name':'full \
name',...}\\n |      If you want to provide a solver to NEOS in an \
unavailable category,\\n |      please email the NEOS administrators and we \
will add it for you.\\n |  \\n |  listSolversInCategory(self, category)\\n |  \
    List all NEOS solvers in this category\\n |      \\n |      Returns a \
list of solver:input for every solver in the category\\n |      (category can \
be abbreviation or full_name)\\n |  \\n |  listSolversOnStation(self, user, \
hostname)\\n |      List the solvers running on a given station.\\n |      \
\\n |      Goes through the SOLVERS table and determines which solvers\\n |   \
   are registered to run on this user@machine (plus pid,port).\\n |  \\n |  \
ping(self)\\n |      Verifies that this NeosServer is running.\\n |      \\n \
|      Returns message 'NeosServer is alive'\\n |  \\n |  pingHost(self, \
user, hostname)\\n |      Verifies a solver daemon.\\n |      \\n |      If \
there is a solver daemon running on this host\\n |      under the user's \
account, then a confimation message\\n |      is returned ('OK').  Otherwise, \
an error message is returned.\\n |  \\n |  printQueue(self)\\n |      Returns \
a string containing the current NEOS jobs.\\n |  \\n |  registerDaemon(self, \
user, host, port, pid)\\n |      Register a solver daemon with NEOS.\\n |     \
 \\n |      If you are maintaining a solver on the NEOS site, then this \
function\\n |      will tell NEOS how to contact the solver daemon on your \
machine.\\n |  \\n |  registerExample(self, xmlstring, password)\\n |      \
Register an example on the NEOS web pages.\\n |      \\n |      This function \
will upload an example onto the NEOS web page\\n |      for your solver.\\n | \
 \\n |  registerJobPid(self, jobNumber, password, pid)\\n |  \\n |  \
registerSolver(self, xmlString)\\n |      Register a new solver on NEOS\\n |  \
    \\n |      This will create a new solver on NEOS.  Anyone is permitted\\n \
|      to register their solver on NEOS.  If you would like to make\\n |      \
your solver available, please read the documentation at\\n |      \
http://neos.mcs.anl.gov/neos/neos-5/Web/SolverHowTo.html\\n |  \\n |  \
removeExample(self, category, solvername, input, passwd, examplename)\\n |    \
  Remove an example from NEOS\\n |      \\n |      This will remove the \
example from your NEOS solver page.\\n |  \\n |  removeSolver(self, category, \
solvername, input, password)\\n |      Remove a solver from NEOS.\\n |      \
\\n |      If you need to temporarily disable your solver, then you can \
use\\n |      the disableSolver method instead.\\n |  \\n |  \
submitErrorResults(self, jobNumber, password, errorMessage)\\n |  \\n |  \
submitFinalResults(self, jobNumber, password, jobResults)\\n |  \\n |  \
submitIntermediateResults(self, jobNumber, password, jobOut)\\n |  \\n |  \
submitJob(self, xmlstring, user='', interface='', id=0)\\n |      Submit an \
optimization job to NEOS.\\n |      \\n |      Use this method to submit your \
job to NEOS.\\n |      It will return a tuple containing \
(jobnumber,password).\\n |      You can the use this jobnumber and password \
to get the\\n |      results or status of your job using the methods \
getStatus,\\n |      getIntermediateResults, and getFinalResults.\\n |      \
\\n |      In case of an error (NEOS Job queue is full), submitJob() will\\n \
|      return (0,errorMessage)\\n |      \\n |      For more information on \
the format of the xmlstring, you can\\n |      use the getSolverTemplate \
function.\\n |  \\n |  validateSolverXML(self, xmlString)\\n |      Checks \
the syntax of the solver XML description.\\n |      \\n |      Before \
submitting your solver description to NEOS, you can use\\n |      this method \
to check if your syntax is correct.  It will either\\n |      return 'OK' or \
an error message.\\n |  \\n |  version(self)\\n |      Returns version number \
of the NEOS server (string).\\n |  \\n |  welcome(self)\\n |      Returns a \
welcome message.\\n\"\>"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosEmailHelp", "[", "]"}]], "Input"],

Cell[BoxData["\<\"    \
________________________________________________________\\n    \\n            \
        WELCOME TO NEOS!\\n    \\n            The Network-Enabled \
Optimization System\\n\\n                       developed by\\n    \\n        \
    The Optimization Technology Center of\\n    Argonne National Laboratory \
and Northwestern University\\n    \
________________________________________________________\\n    \\n    \\n    \
I. ABSTRACT\\n    \\n    This server accepts optimization problems sent \
electronically, and \\n    solves them using the computing facilities of the \
Optimization \\n    Technology Center and other participating hosts. The user \
can obtain\\n    information on the optimization problem, the solution \
process, and\\n    the solution. Further, users can register their own \
software with\\n    this server, making their code available to other \
users.\\n    \\n    This server is under construction.  Comments and \
suggestions should\\n    be sent to neos-support@cs.wisc.edu. \\n    We have \
assumed familiarity with basic optimization terminology.  If \\n    you need \
additional information, consult\\n\\n    J. More' and S. Wright,\\n    \
Optimization Software Guide,\\n    SIAM Publications, 1993.\\n\\n\\n\\n    \
II. DISCLAIMER\\n\\n    This information is provided without any express or \
implied\\n    warranty.  In particular, there is no warranty of any kind \\n  \
  concerning the fitness of this information for any particular\\n    \
purpose.\\n    \\n\\nThe following solvers are available on the NEOS \
server.\\nFor more information on a particular solver, send:\\nhelp \
&lt;category&gt;:&lt;solver&gt;:&lt;input&gt;\\n\\n\\ttest:HelloNEOS:default\\\
n\\tlp:Clp:MPS\\n\\tmilp:Cbc:MPS\\n\\tmilp:Cbc:AMPL\\n\\tmilp:MINTO:AMPL\\n\\\
tmilp:SYMPHONY:MPS\\n\\tminco:Bonmin:AMPL\\n\\tminco:Couenne:AMPL\\n\\tminco:\
FilMINT:AMPL\\n\\tnco:Ipopt:AMPL\\n\\tlp:FortMP:MPS\\n\\tmilp:XpressMP:GAMS\\\
n\\tmilp:XpressMP:AMPL\\n\\tlp:XpressMP:AMPL\\n\\tlno:MOSEK:AMPL\\n\\tlp:\
MOSEK:AMPL\\n\\tlp:MOSEK:MPS\\n\\tnco:MOSEK:AMPL\\n\\tlp:Gurobi:AMPL\\n\\\
tmilp:Gurobi:AMPL\\n\\tlp:Gurobi:GAMS\\n\\tmilp:Gurobi:GAMS\\n\\tlp:Gurobi:\
MPS\\n\\tmilp:Gurobi:MPS\\n\\tcp:MILES:GAMS\\n\\tcp:NLPEC:GAMS\\n\\tcp:PATH:\
GAMS\\n\\tgo:BARON:GAMS\\n\\tgo:LINDOGlobal:GAMS\\n\\tlno:MOSEK:GAMS\\n\\tlno:\
RELAX4:DIMACS\\n\\tlno:RELAX4:RELAX4\\n\\tlp:BDMLP:GAMS\\n\\tlp:MOSEK:GAMS\\n\
\\tlp:XpressMP:GAMS\\n\\tmilp:Cbc:GAMS\\n\\tmilp:Glpk:GAMS\\n\\tmilp:MOSEK:\
GAMS\\n\\tmilp:scip:GAMS\\n\\tminco:AlphaECP:GAMS\\n\\tminco:BARON:GAMS\\n\\\
tminco:Bonmin:GAMS\\n\\tminco:Couenne:GAMS\\n\\tminco:DICOPT:GAMS\\n\\tminco:\
LINDOGlobal:GAMS\\n\\tminco:SBB:GAMS\\n\\tnco:CONOPT:GAMS\\n\\tnco:Ipopt:GAMS\
\\n\\tnco:KNITRO:GAMS\\n\\tnco:MINOS:GAMS\\n\\tnco:MOSEK:GAMS\\n\\tnco:\
PATHNLP:GAMS\\n\\tnco:SNOPT:GAMS\\n\\tsocp:MOSEK:GAMS\\n\\tcp:KNITRO:AMPL\\n\\\
tbco:L-BFGS-B:AMPL\\n\\tlp:OOQP:AMPL\\n\\tnco:CONOPT:AMPL\\n\\tnco:KNITRO:\
AMPL\\n\\tnco:LANCELOT:AMPL\\n\\tnco:LOQO:AMPL\\n\\tnco:MINOS:AMPL\\n\\tnco:\
SNOPT:AMPL\\n\\tkestrel:ALPHAECP:GAMS\\n\\tkestrel:BARON:GAMS\\n\\tkestrel:\
BDMLP:GAMS\\n\\tkestrel:BONMIN:GAMS\\n\\tkestrel:CBC:GAMS\\n\\tkestrel:CONOPT:\
GAMS\\n\\tkestrel:COUENNE:GAMS\\n\\tkestrel:DICOPT:GAMS\\n\\tkestrel:IPOPT:\
GAMS\\n\\tkestrel:KNITRO:GAMS\\n\\tkestrel:LindoGlobal:GAMS\\n\\tkestrel:\
MILES:GAMS\\n\\tkestrel:MINOS:GAMS\\n\\tkestrel:MOSEK:GAMS\\n\\tkestrel:NLPEC:\
GAMS\\n\\tkestrel:PATHNLP:GAMS\\n\\tkestrel:PATH:GAMS\\n\\tkestrel:SBB:GAMS\\\
n\\tkestrel:SCIP:GAMS\\n\\tkestrel:snopt:GAMS\\n\\tkestrel:XPRESS:GAMS\\n\\\
tkestrel:Bonmin:AMPL\\n\\tkestrel:Cbc:AMPL\\n\\tkestrel:FilMINT:AMPL\\n\\\
tkestrel:Ipopt:AMPL\\n\\tkestrel:LANCELOT:AMPL\\n\\tkestrel:L-BFGS-B:AMPL\\n\\\
tkestrel:LOQO:AMPL\\n\\tkestrel:MINOS:AMPL\\n\\tkestrel:SNOPT:AMPL\\n\\tcp:\
PATH:AMPL\\n\\tmilp:feaspump:MPS\\n\\tmilp:feaspump:CPLEX\\n\\tmilp:feaspump:\
AMPL\\n\\tgo:ASA:AMPL\\n\\tco:BiqMac:SPARSE\\n\\tbco:TRON:FORTRAN\\n\\tminco:\
MINLP:AMPL\\n\\tnco:filter:AMPL\\n\\tsdp:DSDP:SDPA\\n\\tmilp:scip:AMPL\\n\\\
tmilp:scip:MPS\\n\\tmilp:scip:CPLEX\\n\\tmilp:scip:ZIMPL\\n\\tsdp:csdp:SPARSE_\
SDPA\\n\\tsdp:csdp:MATLAB_BINARY\\n\\tsdp:penbmi:MATLAB\\n\\tsdp:penbmi:\
MATLAB_BINARY\\n\\tgo:icos:AMPL\\n\\tmilp:scip:OSIL\\n\\tsdp:SDPA:SPARSE_SDPA\
\\n\\tsdp:SDPA:MATLAB_BINARY\\n\\tmiocp:MUSCOD-II:AMPL\\n\\tkestrel:CONOPT:\
AMPL\\n\\tkestrel:COUENNE:AMPL\\n\\tkestrel:filter:AMPL\\n\\tkestrel:KNITRO:\
AMPL\\n\\tkestrel:MINLP:AMPL\\n\\tkestrel:MINTO:AMPL\\n\\tkestrel:MOSEK:AMPL\\\
n\\tkestrel:OOQP:AMPL\\n\\tsdp:sdplr:MATLAB_BINARY\\n\\tsdp:sdplr:SPARSE_SDPA\
\\n\\tsdp:sdplr:SDPLR\\n\\tco:concorde:TSP\\n\\tmilp:qsopt_ex:MPS\\n\\tmilp:\
qsopt_ex:LP\\n\\tmilp:qsopt_ex:AMPL\\n\\tslp:ddsip:LP\\n\\tslp:ddsip:MPS\\n\\\
tslp:bnbs:SMPS\\n\\tsdp:pensdp:SPARSE_SDPA\\n\\tsdp:pensdp:MATLAB_BINARY\\n\\\
tsdp:sedumi:SPARSE_SDPA\\n\\tsdp:sedumi:MATLAB_BINARY\\n\\tlp:bpmpd:AMPL\\n\\\
tsdp:sdpt3:SPARSE_SDPA\\n\\tsdp:sdpt3:MATLAB_BINARY\\n\\tsio:nsips:AMPL\\n\\\
tndo:condor:AMPL\\n\\tlp:bpmpd:LP\\n\\tlp:bpmpd:MPS\\n\\tlp:bpmpd:QPS\\n\\tgo:\
PGAPack:AMPL\\n\\tgo:PSwarm:AMPL\\n\\tbco:BLMVM:Fortran\\n\\tbco:BLMVM:C\\n\\\
tnco:LRAMBO:C\\n\\tuco:NMTR:Fortran\\n\\tuco:NMTR:C\\n\\tlp:XpressMP:MPS\\n\\\
tlp:XpressMP:MOSEL\\n\\tminco:scip:AMPL\\n\\tgo:scip:GAMS\\n\\tminco:scip:\
GAMS\\n\\tgo:scip:AMPL\\n\\tminco:scip:MPS\\n\\tminco:scip:CPLEX\\n\\tminco:\
scip:ZIMPL\\n\\tminco:scip:OSIL\\n\\tgo:scip:MPS\\n\\tgo:scip:CPLEX\\n\\tgo:\
scip:ZIMPL\\n\\tgo:scip:OSIL\\n\\n\\n\\nMore information on NEOS can be found \
at http://www.neos-server.org/neos\\n\"\>"], "Output",
 CellChangeTimes->{
  3.5587849711710243`*^9, 3.558785010287386*^9, 3.558785110007272*^9, 
   3.5587851839460287`*^9, {3.558785678239361*^9, 3.5587857023291616`*^9}, 
   3.5588613991009283`*^9, 3.55886146826828*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosWelcome", "[", "]"}]], "Input"],

Cell[BoxData["\<\"    \
________________________________________________________\\n    \\n            \
        WELCOME TO NEOS!\\n    \\n            The Network-Enabled \
Optimization System\\n\\n                       developed by\\n    \\n        \
    The Optimization Technology Center of\\n    Argonne National Laboratory \
and Northwestern University\\n    \
________________________________________________________\\n    \\n    \\n    \
I. ABSTRACT\\n    \\n    This server accepts optimization problems sent \
electronically, and \\n    solves them using the computing facilities of the \
Optimization \\n    Technology Center and other participating hosts. The user \
can obtain\\n    information on the optimization problem, the solution \
process, and\\n    the solution. Further, users can register their own \
software with\\n    this server, making their code available to other \
users.\\n    \\n    This server is under construction.  Comments and \
suggestions should\\n    be sent to neos-support@cs.wisc.edu. \\n    We have \
assumed familiarity with basic optimization terminology.  If \\n    you need \
additional information, consult\\n\\n    J. More' and S. Wright,\\n    \
Optimization Software Guide,\\n    SIAM Publications, 1993.\\n\\n\\n\\n    \
II. DISCLAIMER\\n\\n    This information is provided without any express or \
implied\\n    warranty.  In particular, there is no warranty of any kind \\n  \
  concerning the fitness of this information for any particular\\n    \
purpose.\\n    \"\>"], "Output",
 CellChangeTimes->{
  3.5587850431679077`*^9, 3.558785180450487*^9, {3.558785699056884*^9, 
   3.5587857089829063`*^9}, 3.558861481026017*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["neosVersion", "Input"],
 " and ",
 StyleBox["neosPing", "Input"],
 " return the server version and allows to acknowledge the server status:"
}], "Text",
 CellChangeTimes->{{3.558861108617827*^9, 3.558861125624384*^9}, {
  3.558861204835657*^9, 3.55886121634453*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosVersion", "[", "]"}]], "Input"],

Cell[BoxData["\<\"neos version 5 (Madison)\"\>"], "Output",
 CellChangeTimes->{3.558785126607607*^9, 3.558785167135623*^9, 
  3.55878571159571*^9, 3.558794658810195*^9, 3.558861495881177*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosPing", "[", "]"}]], "Input"],

Cell[BoxData["\<\"NeosServer is alive\\n\"\>"], "Output",
 CellChangeTimes->{3.5587851692981377`*^9, 3.558785713144678*^9, 
  3.558794659893174*^9, 3.5588614979838057`*^9}]
}, Open  ]],

Cell[TextData[{
 "The server load can be checked using ",
 StyleBox["neosPrintQueue", "Input"],
 ":"
}], "Text",
 CellChangeTimes->{{3.558861243039254*^9, 3.558861258063521*^9}, 
   3.5588624410634604`*^9, {3.558862550932989*^9, 3.558862561099339*^9}, {
   3.558862625822166*^9, 3.558862662226317*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosPrintQueue", "[", "]"}]], "Input"],

Cell[BoxData[{
 RowBox[{"Running", ":", 
  RowBox[{
  "job", "#", " ", "555551", " ", "0.04", "X", " ", "0.04", "XX", " ", "0.04",
    "X", " ", "submitted", " ", 
   RowBox[{"MM", "/", "DD"}], " ", 
   RowBox[{"HH", ":", 
    RowBox[{"MM", " ", "started", " ", 
     RowBox[{"MM", "/", "DD"}], " ", 
     RowBox[{"HH", ":", 
      RowBox[{"MM", " ", "on", " ", 
       RowBox[{"domain", ".", "name", ".", "tld"}]}]}]}]}]}]}], "\n", 
 RowBox[{"job", "#", " ", "555552", " ", "0.04", "X", " ", "0.04", "XX", " ", 
  "0.04", "X", " ", "submitted", " ", 
  RowBox[{"MM", "/", "DD"}], " ", 
  RowBox[{"HH", ":", 
   RowBox[{"MM", " ", "started", " ", 
    RowBox[{"MM", "/", "DD"}], " ", 
    RowBox[{"HH", ":", 
     RowBox[{"MM", " ", "on", " ", 
      RowBox[{"domain", ".", "name", ".", "tld"}]}]}]}]}]}], "\n", 
 RowBox[{"job", "#", " ", "555553", " ", "0.04", "X", " ", "0.04", "XX", " ", 
  "0.04", "X", " ", "submitted", " ", 
  RowBox[{"MM", "/", "DD"}], " ", 
  RowBox[{"HH", ":", 
   RowBox[{"MM", " ", "started", " ", 
    RowBox[{"MM", "/", "DD"}], " ", 
    RowBox[{"HH", ":", 
     RowBox[{"MM", " ", "on", " ", 
      RowBox[{"domain", ".", "name", ".", "tld"}]}]}]}]}]}], "\n", 
 RowBox[{"job", "#", " ", "555554", " ", "0.04", "X", " ", "0.04", "XX", " ", 
  "0.04", "X", " ", "submitted", " ", 
  RowBox[{"MM", "/", "DD"}], " ", 
  RowBox[{"HH", ":", 
   RowBox[{"MM", " ", "started", " ", 
    RowBox[{"MM", "/", "DD"}], " ", 
    RowBox[{"HH", ":", 
     RowBox[{"MM", " ", "on", " ", 
      RowBox[{"domain", ".", "name", ".", "tld"}]}]}]}]}]}], "\n", 
 RowBox[{
  RowBox[{
  "job", "#", " ", "555555", " ", "0.04", "X", " ", "0.04", "XX", " ", "0.04",
    "X", " ", "submitted", " ", 
   RowBox[{"MM", "/", "DD"}], " ", 
   RowBox[{"HH", ":", 
    RowBox[{"MM", " ", "started", " ", 
     RowBox[{"MM", "/", "DD"}], " ", 
     RowBox[{"HH", ":", 
      RowBox[{"MM", " ", "on", " ", 
       RowBox[{"domain", ".", "name", ".", "tld"}]}]}]}]}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"Queued", ":", 
  RowBox[{"No", " ", "Jobs", " ", "in", " ", 
   RowBox[{"Queue", "."}]}]}]}], "Output",
 CellChangeTimes->{{3.558862483941743*^9, 3.558862492708437*^9}}]
}, Open  ]],

Cell["\<\
The output (with fake data in this example) shows a line per job, listing job \
number, category, user name, input method, submit date, execution date and \
server address.

A job is submitted encoding its description in the chosen modeling language \
using the corresponding XML format. More information on this can be found on \
the NEOS solvers page, selecting the used solver and then following the \
\[LeftGuillemet]XML-RPC\[RightGuillemet] link on the upper-right part of the \
shown page. For instance the following string encodes in AMPL the simple \
problem of learning the binary OR function through a linear support vector \
machine:\
\>", "Text",
 CellChangeTimes->{3.558862741231708*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "request", "=", 
   "\"\<<document>\n<category>nco</category>\n<solver>SNOPT</solver>\n\
<inputMethod>AMPL</inputMethod>\n<model><![CDATA[\n\nparam m integer > 0 \
default 4; # number of sample points\nparam n integer > 0 default 2; # sample \
space dimension\n\nparam x {1..m,1..n}; # sample points\nparam y {1..m}; # \
sample labels\nparam dot{i in 1..m,j in 1..m}:=sum{k in 1..n}(x[i,k]*x[j,k]);\
\n\nvar alpha{1..m}>=0;\nvar w{1..n};\n\nmaximize quadratic_form:\nsum{i in \
1..m} alpha[i]\n-1/2*sum{i in 1..m,j in \
1..m}alpha[i]*alpha[j]*y[i]*y[j]*dot[i,j];\n\nsubject to linear_constraint:\n\
sum{i in 1..m} alpha[i]*y[i]=0;\n\nsubject to w_def{k in 1..n}:\nw[k]=sum{i \
in 1..m} alpha[i]*y[i]*x[i,k];\n\n]]></model>\n\n<data><![CDATA[\n\ndata;\n\n\
param   x:      1       2       :=\n1       0    0\n2       0    1\n3       1 \
   0\n4       1    1     ;\n\nparam y :=\n1       -1\n2       1\n3       1\n4 \
      1;\n\n]]></data>\n\n<commands><![CDATA[\n\noption solver snopt;\n\n\
solve;\n\nprintf: \\\"{{\\\";\nprintf {k in 1..n-1}:\\\"%f,\\\",w[k];\n\
printf: \\\"%f},\\\",w[n];\nprintf: \\\"%f}\\\\n\\\",sum{i in \
1..m:alpha[i]>0} (y[i]-sum{k in 1..n}w[k]*x[i,k])/sum{j in 1..m:alpha[j]>0} \
1;\n\n]]></commands>\n\n</document>\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.5587855235577803`*^9, 3.558785592139913*^9}, {
   3.558785855471799*^9, 3.558786061562188*^9}, {3.5587934191453953`*^9, 
   3.558793449983152*^9}, 3.55879348477147*^9, {3.558793971214576*^9, 
   3.558793973741453*^9}, {3.558801097350367*^9, 3.558801138057866*^9}, {
   3.5588011745987797`*^9, 3.5588011749893436`*^9}}],

Cell[TextData[{
 "Once written, this description is submitted to the server through the ",
 StyleBox["neosSubmitJob", "Input"],
 " function:"
}], "Text",
 CellChangeTimes->{3.558862799526875*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"jobNum", ",", "jobPwd"}], "}"}], "=", 
  RowBox[{"neosSubmitJob", "[", "request", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"319185\"\>", ",", "\<\"TzXLdZUf\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.55878563468655*^9, 3.558785720790818*^9, 3.558785915171774*^9, {
   3.558786044470634*^9, 3.558786068143469*^9}, 3.558786284312611*^9, 
   3.5587935152379913`*^9, 3.558793976272286*^9, 3.558794680115014*^9, {
   3.558801148630221*^9, 3.5588011779901667`*^9}, 3.558861532580126*^9}]
}, Open  ]],

Cell[TextData[{
 "If no errors occurred, the function returns a list containing the assigned \
job number and a password, both to be used in order to pose queries for the \
submitted job. Otherwise, a string describing the error is returned. Typical \
queries concerns the job status retrieval, obtained through the function ",
 StyleBox["neosGetJobStatus", "Input"],
 ", returning either ",
 StyleBox["\[OpenCurlyDoubleQuote]Done\[CloseCurlyDoubleQuote]", "Input"],
 ", ",
 StyleBox["\[OpenCurlyDoubleQuote]Running\[CloseCurlyDoubleQuote]", "Input"],
 ", ",
 StyleBox["\[OpenCurlyDoubleQuote]Waiting\[CloseCurlyDoubleQuote]", "Input"],
 ", ",
 StyleBox["\[OpenCurlyDoubleQuote]Unknown Job\[CloseCurlyDoubleQuote]", 
  "Input"],
 ", or ",
 StyleBox["\[OpenCurlyDoubleQuote]Bad Password\[CloseCurlyDoubleQuote]", 
  "Input"],
 ":"
}], "Text",
 CellChangeTimes->{{3.558862892053891*^9, 3.558862954895494*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosGetJobStatus", "[", 
  RowBox[{"jobNum", ",", "jobPwd"}], "]"}]], "Input"],

Cell[BoxData["\<\"Waiting\"\>"], "Output",
 CellChangeTimes->{
  3.5587860714565067`*^9, 3.558786286863306*^9, {3.5587935171946907`*^9, 
   3.55879354930999*^9}, 3.5587939443692627`*^9, 3.558793977992642*^9, 
   3.558794682421678*^9, {3.5588011516632032`*^9, 3.558801179414298*^9}, 
   3.5588615376724777`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"neosGetJobStatus", "[", 
  RowBox[{"jobNum", ",", "jobPwd"}], "]"}]], "Input"],

Cell[BoxData["\<\"Done\"\>"], "Output",
 CellChangeTimes->{3.558862290740903*^9}]
}, Open  ]],

Cell[TextData[{
 "Once a job has been executed, its results are fetched through the function ",
 StyleBox["neosGetFinalResults", "Input"],
 ":"
}], "Text",
 CellChangeTimes->{3.558863026859717*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"res", "=", 
  RowBox[{"neosGetFinalResults", "[", 
   RowBox[{"jobNum", ",", "jobPwd"}], "]"}]}]], "Input"],

Cell[BoxData["\<\"Job 319185 sent to neos-4.chtc.wisc.edu\\npassword: \
TzXLdZUf\\n---------- Begin Solver Output -----------\\nExecuting \
/opt/neos/Drivers/snopt-ampl/snopt-driver.py at time: 2012-10-10 \
12:43:12.402268\\nFile exists\\nYou are using the solver snopt.\\nExecuting \
AMPL.\\nprocessing data.\\nprocessing commands.\\n\\n6 variables:\\n\\t3 \
nonlinear variables\\n\\t3 linear variables\\n3 constraints, all linear; 10 \
nonzeros\\n\\t3 equality constraints\\n1 nonlinear objective; 4 \
nonzeros.\\n\\nSNOPT 7.2-10 : Optimal solution found.\\n2 iterations, \
objective 4\\n{{2.000000,2.000000},-1.000000}\\n\"\>"], "Output",
 CellChangeTimes->{
  3.558786075151786*^9, 3.558786291820293*^9, 3.558793946999754*^9, 
   3.5587939795851803`*^9, 3.558794685127276*^9, {3.55880115418006*^9, 
   3.55880118219619*^9}, 3.558862294264058*^9}]
}, Open  ]],

Cell[TextData[{
 "Finally, the function ",
 StyleBox["neosSolveJob", "Input"],
 " handles all the communication with the NEOS server, submitting a job and \
blocking until it completes, subsequently returning the results:"
}], "Text",
 CellChangeTimes->{3.558863064285489*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theResult", "=", 
  RowBox[{"neosSolveJob", "[", "request", "]"}]}]], "Input"],

Cell[BoxData["\<\"Job 319194 sent to neos-2.chtc.wisc.edu\\npassword: \
iwJMtHEn\\n---------- Begin Solver Output -----------\\nExecuting \
/opt/neos/Drivers/snopt-ampl/snopt-driver.py at time: 2012-10-10 \
06:57:58.361491\\nFile exists\\nYou are using the solver snopt.\\nExecuting \
AMPL.\\nprocessing data.\\nprocessing commands.\\n\\n6 variables:\\n\\t3 \
nonlinear variables\\n\\t3 linear variables\\n3 constraints, all linear; 10 \
nonzeros\\n\\t3 equality constraints\\n1 nonlinear objective; 4 \
nonzeros.\\n\\nSNOPT 7.2-10 : Optimal solution found.\\n2 iterations, \
objective 4\\n{{2.000000,2.000000},-1.000000}\\n\"\>"], "Output",
 CellChangeTimes->{3.5587860848930473`*^9, 3.558794002584149*^9, 
  3.558794691813334*^9, 3.5587948560333757`*^9, 3.558801187945588*^9, 
  3.558862683336071*^9}]
}, Open  ]],

Cell["\<\
Of course, in order to actually process the obtained results it will be \
necessary to strip out the initial part of the output and possibly convert \
the remaining part:\
\>", "Text",
 CellChangeTimes->{3.5588631263558893`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"StringReplace", "[", 
   RowBox[{"theResult", ",", 
    RowBox[{
     RowBox[{"___", "~~", 
      RowBox[{"\"\<{{\>\"", "~~", 
       RowBox[{"o__", "~~", 
        RowBox[{"\"\<}\>\"", "~~", "___"}]}]}]}], "\[Rule]", 
     RowBox[{"\"\<{{\>\"", "~~", 
      RowBox[{"o", "~~", "\"\<}\>\""}]}]}]}], "]"}], "//", 
  "ToExpression"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2.`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"-", "1.`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.558794702662599*^9, 3.558794860722975*^9, 
  3.558863104228134*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->{"RulerBar", "EditBar"},
WindowSize->{1053, 788},
WindowMargins->{{Automatic, 15}, {Automatic, 0}},
ShowSelection->True,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.5, 1.5 Inherited],
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 6, \
2010)",
StyleDefinitions->FrontEnd`FileName[{"Report"}, "AutomatedReport.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 103, 2, 240, "Title"],
Cell[685, 26, 239, 7, 148, "Author"],
Cell[927, 35, 2765, 58, 410, "Code"],
Cell[CellGroupData[{
Cell[3717, 97, 34, 0, 99, "Section"],
Cell[3754, 99, 472, 13, 62, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4263, 117, 55, 0, 99, "Section"],
Cell[4321, 119, 1069, 29, 129, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5427, 153, 104, 1, 99, "Section"],
Cell[5534, 156, 143, 3, 39, "Text"],
Cell[5680, 161, 484, 13, 64, "Code"],
Cell[6167, 176, 192, 4, 39, "Text"],
Cell[6362, 182, 489, 13, 64, "Code"],
Cell[6854, 197, 301, 5, 39, "Text"],
Cell[7158, 204, 487, 13, 64, "Code"],
Cell[7648, 219, 213, 5, 39, "Text"],
Cell[7864, 226, 487, 13, 64, "Code"],
Cell[8354, 241, 179, 4, 39, "Text"],
Cell[8536, 247, 484, 13, 64, "Code"],
Cell[9023, 262, 259, 8, 39, "Text"],
Cell[9285, 272, 490, 13, 64, "Code"],
Cell[9778, 287, 184, 4, 39, "Text"],
Cell[9965, 293, 598, 17, 96, "Code"],
Cell[10566, 312, 565, 14, 93, "Text"],
Cell[11134, 328, 2327, 60, 99, "Code"],
Cell[13464, 390, 788, 33, 93, "Text"],
Cell[14255, 425, 1696, 46, 144, "Code"],
Cell[15954, 473, 494, 14, 87, "Text"],
Cell[16451, 489, 597, 17, 144, "Code"],
Cell[17051, 508, 494, 11, 87, "Text"],
Cell[17548, 521, 1691, 46, 144, "Code"],
Cell[19242, 569, 518, 16, 87, "Text"],
Cell[19763, 587, 1688, 46, 144, "Code"],
Cell[21454, 635, 325, 12, 87, "Text"],
Cell[21782, 649, 2324, 63, 144, "Code"],
Cell[24109, 714, 618, 17, 136, "Text"],
Cell[24730, 733, 494, 13, 144, "Code"],
Cell[25227, 748, 180, 4, 87, "Text"],
Cell[25410, 754, 494, 13, 144, "Code"],
Cell[25907, 769, 277, 8, 87, "Text"],
Cell[26187, 779, 621, 18, 144, "Code"],
Cell[26811, 799, 344, 11, 87, "Text"],
Cell[27158, 812, 826, 25, 144, "Code"],
Cell[27987, 839, 434, 16, 87, "Text"],
Cell[28424, 857, 2202, 59, 144, "Code"],
Cell[30629, 918, 557, 17, 87, "Text"],
Cell[31189, 937, 1707, 46, 144, "Code"],
Cell[32899, 985, 463, 13, 139, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33399, 1003, 77, 1, 222, "Section"],
Cell[33479, 1006, 116, 5, 87, "Text"],
Cell[33598, 1013, 52, 1, 63, "Input"],
Cell[33653, 1016, 267, 9, 87, "Text"],
Cell[CellGroupData[{
Cell[33945, 1029, 56, 1, 63, "Input"],
Cell[34004, 1032, 9267, 121, 11103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43308, 1158, 61, 1, 63, "Input"],
Cell[43372, 1161, 5819, 77, 11002, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49228, 1243, 59, 1, 63, "Input"],
Cell[49290, 1246, 1680, 24, 2088, "Output"]
}, Open  ]],
Cell[50985, 1273, 293, 7, 87, "Text"],
Cell[CellGroupData[{
Cell[51303, 1284, 59, 1, 63, "Input"],
Cell[51365, 1287, 191, 2, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51593, 1294, 56, 1, 63, "Input"],
Cell[51652, 1297, 172, 2, 117, "Output"]
}, Open  ]],
Cell[51839, 1302, 302, 7, 87, "Text"],
Cell[CellGroupData[{
Cell[52166, 1313, 62, 1, 63, "Input"],
Cell[52231, 1316, 2179, 54, 634, "Output"]
}, Open  ]],
Cell[54425, 1373, 710, 13, 391, "Text"],
Cell[55138, 1388, 1644, 25, 3177, "Input"],
Cell[56785, 1415, 195, 5, 87, "Text"],
Cell[CellGroupData[{
Cell[57005, 1424, 152, 4, 63, "Input"],
Cell[57160, 1430, 407, 7, 63, "Output"]
}, Open  ]],
Cell[57582, 1440, 907, 20, 240, "Text"],
Cell[CellGroupData[{
Cell[58514, 1464, 102, 2, 63, "Input"],
Cell[58619, 1468, 310, 5, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58966, 1478, 102, 2, 63, "Input"],
Cell[59071, 1482, 81, 1, 63, "Output"]
}, Open  ]],
Cell[59167, 1486, 197, 5, 87, "Text"],
Cell[CellGroupData[{
Cell[59389, 1495, 131, 3, 63, "Input"],
Cell[59523, 1500, 850, 12, 1152, "Output"]
}, Open  ]],
Cell[60388, 1515, 276, 6, 139, "Text"],
Cell[CellGroupData[{
Cell[60689, 1525, 102, 2, 63, "Input"],
Cell[60794, 1529, 803, 11, 1152, "Output"]
}, Open  ]],
Cell[61612, 1543, 238, 5, 139, "Text"],
Cell[CellGroupData[{
Cell[61875, 1552, 376, 11, 118, "Input"],
Cell[62254, 1565, 236, 7, 63, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
